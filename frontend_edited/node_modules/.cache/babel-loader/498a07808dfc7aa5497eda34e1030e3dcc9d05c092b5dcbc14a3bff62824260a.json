{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dell\\\\OneDrive\\\\Desktop\\\\Abc\\\\frontend_edited\\\\src\\\\components\\\\submit.js\",\n  _s = $RefreshSig$();\n// submit.js\n\nimport { useStore } from \"../store/store\";\nimport { parsePipelineAPI } from \"../api/parsePipeline\";\nimport Alert from \"./Alert/Alert\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SubmitButton = () => {\n  _s();\n  const {\n    nodes,\n    edges\n  } = useStore();\n  const [showAlert, setShowAlert] = useState(false);\n  const [alertType, setAlertType] = useState(\"success\");\n  const [alertMessage, setAlertMessage] = useState(\"\");\n  const dismissAlert = () => {\n    setShowAlert(false);\n    setAlertMessage(\"\");\n  };\n  const handleSubmitForm = async () => {\n    // create edge list\n    const edgeList = [];\n    edges.forEach(edge => {\n      let source = edge.source;\n      let target = edge.target;\n      // adding directed edge (sourceHandle, targetHandle);\n      edgeList.push([source, target]);\n    });\n\n    // if no nodes do nothing\n    // can be customized according to our need\n    if (nodes.length === 0) {\n      setAlertType(\"error\");\n      setAlertMessage(\"Add some nodes\");\n      setShowAlert(true);\n      return;\n    }\n\n    // Checking if cycle is present or not in the graph using API.\n    try {\n      const data = await parsePipelineAPI(edgeList, nodes);\n      console.log(data);\n      const message = `Graph Summary:\\nNumber of Nodes: ${data.num_nodes}\\nNumber of Edges: ${data.num_edges}\\nIs Acyclic: ${data.is_dag ? \"Yes\" : \"No\"}`;\n      setAlertType(\"success\");\n      setAlertMessage(message);\n      setShowAlert(true);\n    } catch (error) {\n      const message = \"Something went wrong!\";\n      console.log(error);\n      setAlertType(\"error\");\n      setAlertMessage(message);\n      setShowAlert(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex items-center justify-center m-8 relative\",\n    children: [showAlert ? /*#__PURE__*/_jsxDEV(Alert, {\n      onDismiss: dismissAlert,\n      message: alertMessage,\n      type: alertType\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this) : \"\", /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      onClick: handleSubmitForm,\n      className: \"bg-transparent hover:bg-teal-500 text-teal-600 font-semibold hover:text-white py-2 px-4 border border-green-500 hover:border-transparent rounded\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(SubmitButton, \"lXbsP4wrZQmnL0q8nNYo4/0kWU8=\", false, function () {\n  return [useStore];\n});\n_c = SubmitButton;\nvar _c;\n$RefreshReg$(_c, \"SubmitButton\");","map":{"version":3,"names":["useStore","parsePipelineAPI","Alert","useState","jsxDEV","_jsxDEV","SubmitButton","_s","nodes","edges","showAlert","setShowAlert","alertType","setAlertType","alertMessage","setAlertMessage","dismissAlert","handleSubmitForm","edgeList","forEach","edge","source","target","push","length","data","console","log","message","num_nodes","num_edges","is_dag","error","className","children","onDismiss","type","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/dell/OneDrive/Desktop/Abc/frontend_edited/src/components/submit.js"],"sourcesContent":["// submit.js\n\nimport { useStore } from \"../store/store\";\nimport { parsePipelineAPI } from \"../api/parsePipeline\";\nimport Alert from \"./Alert/Alert\";\nimport { useState } from \"react\";\nexport const SubmitButton = () => {\n  const { nodes, edges } = useStore();\n  const [showAlert, setShowAlert] = useState(false);\n  const [alertType, setAlertType] = useState(\"success\");\n  const [alertMessage, setAlertMessage] = useState(\"\");\n\n  const dismissAlert = () => {\n    setShowAlert(false);\n    setAlertMessage(\"\");\n  };\n\n  const handleSubmitForm = async () => {\n    // create edge list\n    const edgeList = [];\n\n    edges.forEach((edge) => {\n      let source = edge.source;\n      let target = edge.target;\n      // adding directed edge (sourceHandle, targetHandle);\n      edgeList.push([source, target]);\n    });\n\n    // if no nodes do nothing\n    // can be customized according to our need\n    if (nodes.length === 0) {\n      setAlertType(\"error\");\n      setAlertMessage(\"Add some nodes\");\n      setShowAlert(true);\n      return;\n    }\n\n    // Checking if cycle is present or not in the graph using API.\n    try {\n      \n      const data = await parsePipelineAPI(edgeList, nodes);\n       console.log(data)\n      const message = `Graph Summary:\\nNumber of Nodes: ${\n        data.num_nodes\n      }\\nNumber of Edges: ${data.num_edges}\\nIs Acyclic: ${\n        data.is_dag ? \"Yes\" : \"No\"\n      }`;\n      setAlertType(\"success\");\n      setAlertMessage(message);\n      setShowAlert(true);\n    } catch (error) {\n      const message = \"Something went wrong!\";\n      console.log(error)\n      setAlertType(\"error\");\n      setAlertMessage(message);\n      setShowAlert(true);\n    }\n  };\n\n  return (\n    <div className=\"flex items-center justify-center m-8 relative\">\n      {showAlert ? (\n        <Alert\n          onDismiss={dismissAlert}\n          message={alertMessage}\n          type={alertType}\n        />\n      ) : (\n        \"\"\n      )}\n      <button\n        type=\"submit\"\n        onClick={handleSubmitForm}\n        className=\"bg-transparent hover:bg-teal-500 text-teal-600 font-semibold hover:text-white py-2 px-4 border border-green-500 hover:border-transparent rounded\"\n      >\n        Submit\n      </button>\n    </div>\n  );\n};\n"],"mappings":";;AAAA;;AAEA,SAASA,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,gBAAgB,QAAQ,sBAAsB;AACvD,OAAOC,KAAK,MAAM,eAAe;AACjC,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACjC,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM;IAAEC,KAAK;IAAEC;EAAM,CAAC,GAAGT,QAAQ,CAAC,CAAC;EACnC,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,SAAS,CAAC;EACrD,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAMa,YAAY,GAAGA,CAAA,KAAM;IACzBL,YAAY,CAAC,KAAK,CAAC;IACnBI,eAAe,CAAC,EAAE,CAAC;EACrB,CAAC;EAED,MAAME,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC;IACA,MAAMC,QAAQ,GAAG,EAAE;IAEnBT,KAAK,CAACU,OAAO,CAAEC,IAAI,IAAK;MACtB,IAAIC,MAAM,GAAGD,IAAI,CAACC,MAAM;MACxB,IAAIC,MAAM,GAAGF,IAAI,CAACE,MAAM;MACxB;MACAJ,QAAQ,CAACK,IAAI,CAAC,CAACF,MAAM,EAAEC,MAAM,CAAC,CAAC;IACjC,CAAC,CAAC;;IAEF;IACA;IACA,IAAId,KAAK,CAACgB,MAAM,KAAK,CAAC,EAAE;MACtBX,YAAY,CAAC,OAAO,CAAC;MACrBE,eAAe,CAAC,gBAAgB,CAAC;MACjCJ,YAAY,CAAC,IAAI,CAAC;MAClB;IACF;;IAEA;IACA,IAAI;MAEF,MAAMc,IAAI,GAAG,MAAMxB,gBAAgB,CAACiB,QAAQ,EAAEV,KAAK,CAAC;MACnDkB,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;MAClB,MAAMG,OAAO,GAAI,oCACfH,IAAI,CAACI,SACN,sBAAqBJ,IAAI,CAACK,SAAU,iBACnCL,IAAI,CAACM,MAAM,GAAG,KAAK,GAAG,IACvB,EAAC;MACFlB,YAAY,CAAC,SAAS,CAAC;MACvBE,eAAe,CAACa,OAAO,CAAC;MACxBjB,YAAY,CAAC,IAAI,CAAC;IACpB,CAAC,CAAC,OAAOqB,KAAK,EAAE;MACd,MAAMJ,OAAO,GAAG,uBAAuB;MACvCF,OAAO,CAACC,GAAG,CAACK,KAAK,CAAC;MAClBnB,YAAY,CAAC,OAAO,CAAC;MACrBE,eAAe,CAACa,OAAO,CAAC;MACxBjB,YAAY,CAAC,IAAI,CAAC;IACpB;EACF,CAAC;EAED,oBACEN,OAAA;IAAK4B,SAAS,EAAC,+CAA+C;IAAAC,QAAA,GAC3DxB,SAAS,gBACRL,OAAA,CAACH,KAAK;MACJiC,SAAS,EAAEnB,YAAa;MACxBY,OAAO,EAAEd,YAAa;MACtBsB,IAAI,EAAExB;IAAU;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjB,CAAC,GAEF,EACD,eACDnC,OAAA;MACE+B,IAAI,EAAC,QAAQ;MACbK,OAAO,EAAExB,gBAAiB;MAC1BgB,SAAS,EAAC,kJAAkJ;MAAAC,QAAA,EAC7J;IAED;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAACjC,EAAA,CAzEWD,YAAY;EAAA,QACEN,QAAQ;AAAA;AAAA0C,EAAA,GADtBpC,YAAY;AAAA,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}